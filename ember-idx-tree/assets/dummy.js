eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/node.js should pass jshint\', function() { \n      ok(false, \'ember-cli-qunit/node.js should pass jshint.\\nember-cli-qunit/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-cli-qunit/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-cli-qunit/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-cli-qunit/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-cli-qunit/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-cli-qunit/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/node.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree-branch.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree-node.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/tree.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/tree.jshint.js");

;eval("define(\"dummy/adapters/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];__exports__[\"default\"] = DS.FixtureAdapter.extend()\n  });//# sourceURL=dummy/adapters/application.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/components/em-tree-branch\", \n  [\"ember-idx-tree/tree-branch\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TreeBranchComponent = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = TreeBranchComponent;\n  });//# sourceURL=dummy/components/em-tree-branch.js");

;eval("define(\"dummy/components/em-tree-node-icon-action\", \n  [\"ember-idx-tree/tree-node-icon-action\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TreeNodeIconAction = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = TreeNodeIconAction;\n  });//# sourceURL=dummy/components/em-tree-node-icon-action.js");

;eval("define(\"dummy/components/em-tree-node\", \n  [\"ember-idx-tree/tree-node\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TreeNodeComponent = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = TreeNodeComponent;\n  });//# sourceURL=dummy/components/em-tree-node.js");

;eval("define(\"dummy/components/em-tree\", \n  [\"ember-idx-tree/tree\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TreeComponent = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = TreeComponent;\n  });//# sourceURL=dummy/components/em-tree.js");

;eval("define(\"dummy/controllers/async\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.ObjectController.extend({\n      expandDepth: 1,\n      iconSet: {\n        type0: {\n          nodeOpenIconClasses: [\'fa-li\', \'fa\', \'fa-minus-square-o\'],\n          nodeCloseIconClasses: [\'fa-li\', \'fa\', \'fa-plus-square-o\']\n        },\n        type1: {\n          nodeOpenIconClasses: [\'fa-li\', \'fa\', \'fa-tag\'],\n          nodeCloseIconClasses: [\'fa-li\', \'fa\', \'fa-tags\']\n        }\n      },\n      words: [\'Foo\', \'Bar\', \'Baz\', \'Qux\'],\n      randomWord: function() {\n        return this.words[Math.floor(Math.random() * this.words.length)];\n      },\n      actions: {\n        anotherLevel: function() {\n          return this.set(\'expandDepth\', this.get(\'expandDepth\') + 1);\n        },\n        getChildren: function(node, c) {\n          return Em.run.later(this, function() {\n            var i, o, _results;\n            c.set(\'loading\', false);\n            o = Math.floor(Math.random() * this.words.length) + 1;\n            if (node.get(\'level\') < 4) {\n              i = 0;\n              _results = [];\n              while (i < o) {\n                node.createChild({\n                  title: this.randomWord(),\n                  nodeType: \"type\" + (Math.floor(Math.random() * 2))\n                });\n                _results.push(i++);\n              }\n              return _results;\n            } else {\n              return node.emptyChildren();\n            }\n          }, 500);\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/async.js");

;eval("define(\"dummy/controllers/expand\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      expandDepth: 99,\n      actions: {\n        anotherLevel: function() {\n          return this.set(\'expandDepth\', this.get(\'expandDepth\') + 1);\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/expand.js");

;eval("define(\"dummy/controllers/hoveredactions\", \n  [\"ember\",\"ember-idx-tree/node\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var TreeNode = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Em.ObjectController.extend({\n      message: void 0,\n      actionsMeta: [\n        {\n          classes: [\'fa fa-eye\'],\n          action: \'eye\',\n          types: [\'male\']\n        }, {\n          classes: [\'fa fa-edit\'],\n          action: \'edit\',\n          types: [\'female\']\n        }, {\n          classes: [\'fa fa-trash-o\'],\n          action: \'delete\'\n        }\n      ],\n      init: function() {\n        var family, lud, suz;\n        family = TreeNode.create({\n          title: \'Family\'\n        }, {\n          nodeType: \'family\'\n        });\n        suz = family.createChild({\n          title: \'Susan\',\n          nodeType: \'male\'\n        });\n        lud = family.createChild({\n          title: \'Luda\',\n          nodeType: \'female\'\n        });\n        return this.set(\'model\', family);\n      },\n      actions: {\n        edit: function(actionView) {\n          return this.set(\'message\', \"Editing \" + (actionView.get(\'model.title\')));\n        },\n        \"delete\": function(actionView) {\n          return this.set(\'message\', \"Deleting \" + (actionView.get(\'model.title\')));\n        },\n        eye: function(actionView) {\n          this.set(\'message\', \"Looking at \" + (actionView.get(\'model.title\')));\n          return actionView.toggleProperty(\'sticky\');\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/hoveredactions.js");

;eval("define(\"dummy/controllers/multiselection\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Controller.extend({\n      multi: Ember.A(),\n      multiNames: (function() {\n        var s;\n        s = \"\";\n        this.multi.forEach(function(r) {\n          return s += \" \" + r.get(\'title\');\n        });\n        return s;\n      }).property(\'multi.length\')\n    });\n  });//# sourceURL=dummy/controllers/multiselection.js");

;eval("define(\"dummy/controllers/noderefresh\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.ObjectController.extend({\n      words: [\'Foo\', \'Bar\', \'Baz\', \'Qux\'],\n      randomWord: function() {\n        return this.words[Math.floor(Math.random() * this.words.length)];\n      },\n      actions: {\n        addAndRefresh: function() {\n          return this.get(\'selected\').createChild({\n            title: this.randomWord()\n          });\n        },\n        getChildren: function(node, c) {\n          return Em.run.later(this, function() {\n            var i, o, _results;\n            c.set(\'loading\', false);\n            o = Math.floor(Math.random() * this.words.length) + 1;\n            if (node.get(\'level\') < 4) {\n              i = 0;\n              _results = [];\n              while (i < o) {\n                node.createChild({\n                  title: this.randomWord()\n                });\n                _results.push(i++);\n              }\n              return _results;\n            } else {\n              return node.emptyChildren();\n            }\n          }, 500);\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/noderefresh.js");

;eval("define(\"dummy/controllers/sidebar\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.ArrayController.extend({\n      needs: [\'application\'],\n      model: [\n        {route: \'gettingstarted\', text: \'Getting Started\'},\n        {route: \'simple\', text: \'Simple\'},\n        {route: \'emberdata\', text: \'Ember Data\'},\n        {route: \'async\', text: \'Async\'},\n        {route: \'hoveredactions\', text: \'Hovered Actions\'},\n        {route: \'expand\', text: \'Expand\'},\n        {route: \'multiselection\', text: \'Multi Selection\'},\n        {route: \'noderefresh\', text: \'Node Refresh\'}\n      ]\n    });\n  });//# sourceURL=dummy/controllers/sidebar.js");

;eval("define(\"dummy/controllers/simple\", \n  [\"ember\",\"ember-idx-tree/node\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var TreeNode = __dependency2__[\"default\"];__exports__[\"default\"] = Em.ObjectController.extend({\n      init: function() {\n        var family, gaya, josh, lud, moses, suz, verdi;\n        family = TreeNode.create({\n          title: \'Family\'\n        });\n        suz = family.createChild({\n          title: \'Susan\'\n        });\n        lud = family.createChild({\n          title: \'Luda\'\n        });\n        josh = suz.createChild({\n          title: \'Josh\'\n        });\n        moses = suz.createChild({\n          title: \'Moses\'\n        });\n        verdi = lud.createChild({\n          title: \'Verdi\'\n        });\n        gaya = lud.createChild({\n          title: \'Gaya\'\n        });\n        return this.set(\'model\', family);\n      },\n      actions: {\n        expand: function() {\n          this.get(\'selected\').toggleProperty(\'expanded\');\n          return null;\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/simple.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/node.js should pass jshint\', function() { \n      ok(false, \'ember-cli-content-security-policy/node.js should pass jshint.\\nember-cli-content-security-policy/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-cli-content-security-policy/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-cli-content-security-policy/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-cli-content-security-policy/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-cli-content-security-policy/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-cli-content-security-policy/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/node.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree-branch.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree-node.jshint.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/tree.js should pass jshint\', function() { \n      ok(true, \'ember-cli-content-security-policy/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/tree.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext\');\n    test(\'ember-cli-esnext/node.js should pass jshint\', function() { \n      ok(false, \'ember-cli-esnext/node.js should pass jshint.\\nember-cli-esnext/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-cli-esnext/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-cli-esnext/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-cli-esnext/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-cli-esnext/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-cli-esnext/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/node.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext\');\n    test(\'ember-cli-esnext/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/tree-branch.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext\');\n    test(\'ember-cli-esnext/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext\');\n    test(\'ember-cli-esnext/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/tree-node.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext\');\n    test(\'ember-cli-esnext/tree.js should pass jshint\', function() { \n      ok(true, \'ember-cli-esnext/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/tree.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/node.js should pass jshint\', function() { \n      ok(false, \'ember-data/node.js should pass jshint.\\nember-data/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-data/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-data/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-data/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-data/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-data/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/node.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-data/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/tree-branch.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-data/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-data/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/tree-node.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/tree.js should pass jshint\', function() { \n      ok(true, \'ember-data/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/tree.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/node.js should pass jshint\', function() { \n      ok(false, \'ember-export-application-global/node.js should pass jshint.\\nember-export-application-global/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-export-application-global/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-export-application-global/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-export-application-global/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-export-application-global/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-export-application-global/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/node.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/tree-branch.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/tree-node.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/tree.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/tree.jshint.js");

;eval("define(\"dummy/ember-idx-tree/tests/ember-idx-tree/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-tree\');\n    test(\'ember-idx-tree/node.js should pass jshint\', function() { \n      ok(false, \'ember-idx-tree/node.js should pass jshint.\\nember-idx-tree/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-idx-tree/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-idx-tree/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-idx-tree/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-idx-tree/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-idx-tree/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/ember-idx-tree/tests/ember-idx-tree/node.jshint.js");

;eval("define(\"dummy/ember-idx-tree/tests/ember-idx-tree/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-tree\');\n    test(\'ember-idx-tree/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-idx-tree/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-tree/tests/ember-idx-tree/tree-branch.jshint.js");

;eval("define(\"dummy/ember-idx-tree/tests/ember-idx-tree/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-tree\');\n    test(\'ember-idx-tree/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-idx-tree/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-tree/tests/ember-idx-tree/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/ember-idx-tree/tests/ember-idx-tree/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-tree\');\n    test(\'ember-idx-tree/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-idx-tree/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-tree/tests/ember-idx-tree/tree-node.jshint.js");

;eval("define(\"dummy/ember-idx-tree/tests/ember-idx-tree/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-tree\');\n    test(\'ember-idx-tree/tree.js should pass jshint\', function() { \n      ok(true, \'ember-idx-tree/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-tree/tests/ember-idx-tree/tree.jshint.js");

;eval("define(\"dummy/ember-idx-utils/tests/ember-idx-utils/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-utils\');\n    test(\'ember-idx-utils/node.js should pass jshint\', function() { \n      ok(false, \'ember-idx-utils/node.js should pass jshint.\\nember-idx-utils/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nember-idx-utils/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nember-idx-utils/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nember-idx-utils/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nember-idx-utils/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nember-idx-utils/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/ember-idx-utils/tests/ember-idx-utils/node.jshint.js");

;eval("define(\"dummy/ember-idx-utils/tests/ember-idx-utils/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-utils\');\n    test(\'ember-idx-utils/tree-branch.js should pass jshint\', function() { \n      ok(true, \'ember-idx-utils/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-utils/tests/ember-idx-utils/tree-branch.jshint.js");

;eval("define(\"dummy/ember-idx-utils/tests/ember-idx-utils/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-utils\');\n    test(\'ember-idx-utils/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'ember-idx-utils/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-utils/tests/ember-idx-utils/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/ember-idx-utils/tests/ember-idx-utils/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-utils\');\n    test(\'ember-idx-utils/tree-node.js should pass jshint\', function() { \n      ok(true, \'ember-idx-utils/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-utils/tests/ember-idx-utils/tree-node.jshint.js");

;eval("define(\"dummy/ember-idx-utils/tests/ember-idx-utils/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-utils\');\n    test(\'ember-idx-utils/tree.js should pass jshint\', function() { \n      ok(true, \'ember-idx-utils/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-idx-utils/tests/ember-idx-utils/tree.jshint.js");

;eval("define(\"dummy/initializers/config\", \n  [\"ember\",\"ember-idx-utils/config\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var Config = __dependency2__[\"default\"];__exports__[\"default\"] = {\n      name: \'ember-idx-tree\',\n      initialize: function() {\n        if (!Em.Config) {\n            Em.Config = Config = Config.create()\n        }\n\n        var defaultConfig = Config.getConfig(\'default\');\n        if (!defaultConfig) {\n            Config.addConfig(\'default\');\n            defaultConfig = Config.getConfig(\'default\');\n        }\n\n        defaultConfig[\'tree\'] = {\n            classes: [\'em-tree-branch\', \'em-tree\', \'fa-ul\'],\n                branchClasses: [\'em-tree-branch\', \'fa-ul\'],\n                nodeClasses: [\'em-tree-node\'],\n                nodeOpenClasses: [],\n                nodeCloseClasses: [],\n                nodeOpenIconClasses: [\'fa-li\', \'fa\', \'fa-minus-square-o\'],\n                nodeCloseIconClasses: [\'fa-li\', \'fa\', \'fa-plus-square-o\'],\n                nodeLeafClasses: [\'leaf\'],\n                nodeLeafIconClasses: [\'fa-li\', \'fa\',\'fa-square-o\'],\n                nodeLoadingIconClasses: [\'fa-li\', \'fa\', \'fa-spinner\', \'fa-spin\'],\n                nodeSelectedClasses: [\'em-tree-node-active\']\n        }\n      }\n    };\n  });//# sourceURL=dummy/initializers/config.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/initializers/highlight\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: \'hightlightjs\',\n      initialize: function() {\n        return Em.Route.reopen({\n          renderTemplate: function() {\n            this._super();\n            return Em.run.next(this, function() {\n              return $(\'pre code\').each(function(i, e) {\n                return hljs.highlightBlock(e);\n              });\n            });\n          }\n        });\n      }\n    };\n  });//# sourceURL=dummy/initializers/highlight.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/node.js should pass jshint\', function() { \n      ok(false, \'live-reload-middleware/node.js should pass jshint.\\nlive-reload-middleware/node.js: line 25, col 1, \\\'Node\\\' is not defined.\\nlive-reload-middleware/node.js: line 35, col 34, \\\'object\\\' is not defined.\\nlive-reload-middleware/node.js: line 44, col 9, \\\'Node\\\' is not defined.\\nlive-reload-middleware/node.js: line 47, col 10, \\\'Node\\\' is not defined.\\nlive-reload-middleware/node.js: line 53, col 5, \\\'children\\\' is not defined.\\nlive-reload-middleware/node.js: line 102, col 16, \\\'Node\\\' is not defined.\\n\\n6 errors\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/node.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/tree-branch.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/tree-branch.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/tree-branch.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/tree-branch.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/tree-node-icon-action.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/tree-node-icon-action.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/tree-node-icon-action.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/tree-node-icon-action.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/tree-node.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/tree-node.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/tree-node.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/tree-node.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/tree.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/tree.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/tree.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/tree.jshint.js");

;eval("define(\"dummy/models/tag\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n    var Tag;\n\n    Tag = DS.Model.extend({\n      title: DS.attr(\'string\'),\n      children: DS.hasMany(\'tag\', {\n        async: true, inverse: \'parent\'\n      }),\n      parent: DS.belongsTo(\'tag\', {async: true, inverse: \'children\'})\n    });\n\n\n\n    Tag.reopenClass({\n      FIXTURES: [\n        {\n          id: 1,\n          title: \'Family\',\n          children: [10, 11]\n        }, {\n          id: 10,\n          title: \'Susan\',\n          parent: 1,\n          children: [100, 101]\n        }, {\n          id: 11,\n          title: \'Luda\',\n          parent: 1,\n          children: [102, 103]\n        }, {\n          id: 100,\n          title: \'Josh\',\n          parent: 10,\n          children: [1000]\n        }, {\n          id: 101,\n          title: \'Moses\',\n          parent: 10,\n          children: [1001]\n        }, {\n          id: 102,\n          title: \'Verdi\',\n          parent: 11,\n          children: [1002]\n        }, {\n          id: 103,\n          title: \'Gaya\',\n          parent: 11,\n          children: []\n        }, {\n          id: 1000,\n          title: \'Zuares\',\n          parent: 100,\n          children: []\n        }, {\n          id: 1001,\n          title: \'Romen\',\n          parent: 101,\n          children: []\n        }, {\n          id: 1002,\n          title: \'Flole\',\n          parent: 102,\n          children: []\n        }\n      ]\n    });\n\n    __exports__[\"default\"] = Tag;\n  });//# sourceURL=dummy/models/tag.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n        this.route( \'gettingstarted\' );\n        this.route( \'simple\' );\n        this.route( \'emberdata\' );\n        this.route( \'async\' );\n        this.route( \'hoveredactions\' );\n        this.route( \'expand\' );\n        this.route( \'multiselection\' );\n        this.route( \'noderefresh\' );\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/routes/async\", \n  [\"ember\",\"ember-idx-utils/utils/delay\",\"ember-idx-tree/node\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var delay = __dependency2__[\"default\"];\n    var Node = __dependency3__[\"default\"];\n\n    __exports__[\"default\"] = Em.Route.extend({\n      model: function() {\n        var root;\n        root = Node.create({\n          title: \'Family\'\n        });\n        return root;\n      }\n    });\n  });//# sourceURL=dummy/routes/async.js");

;eval("define(\"dummy/routes/emberdata\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Route.extend({\n      model: function() {\n        return this.store.find(\'tag\', 1);\n      }\n    });\n  });//# sourceURL=dummy/routes/emberdata.js");

;eval("define(\"dummy/routes/expand\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Route.extend({\n      model: function() {\n        return this.store.find(\'tag\', 1);\n      }\n    });\n  });//# sourceURL=dummy/routes/expand.js");

;eval("define(\"dummy/routes/multiselection\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Route.extend({\n      model: function() {\n        return this.store.find(\'tag\', 1);\n      }\n    });\n  });//# sourceURL=dummy/routes/multiselection.js");

;eval("define(\"dummy/routes/noderefresh\", \n  [\"ember\",\"ember-idx-tree/node\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n    var TreeNode = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Em.Route.extend({\n      model: function() {\n        var root;\n        root = TreeNode.create({\n          title: \'Family\'\n        });\n        return root;\n      }\n    });\n  });//# sourceURL=dummy/routes/noderefresh.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers.render || (depth0 && depth0.render),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"navbar\", options) : helperMissing.call(depth0, \"render\", \"navbar\", options))));\n      data.buffer.push(\"\\n<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-sm-3 col-xs-12\\\">\\n            \");\n      data.buffer.push(escapeExpression((helper = helpers.render || (depth0 && depth0.render),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"sidebar\", options) : helperMissing.call(depth0, \"render\", \"sidebar\", options))));\n      data.buffer.push(\"\\n        </div>\\n        <div class=\\\"col-sm-9 col-xs-12 page\\\">\\n            \");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n        </div>\\n    </div>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/async\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h1>Async Tree</h1>\\n\\n<p>\\nThis is the most custom form of loading tree children, it only requires the root node to be built ahead,\\nExpanding a node by clicking it causes an action to be triggered on the controller, expecting the action to build or load the expanded node\'s children, the tree node will expands with the given children.\\n<p>\\n\\n<p>\\nThe data then is cached, that means if the user close the node after openning it and then re-open the node, the data will <i>not</i> be re-loaded asynchronously.\\n</p>\\n\\n<h2>Demo</h2>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'async\': (true),\n        \'icons-per-type\': (\"iconSet\"),\n        \'expand-depth\': (\"expandDepth\")\n      },hashTypes:{\'model\': \"ID\",\'async\': \"BOOLEAN\",\'icons-per-type\': \"ID\",\'expand-depth\': \"ID\"},hashContexts:{\'model\': depth0,\'async\': depth0,\'icons-per-type\': depth0,\'expand-depth\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\n\\n<h2>Markup</h2>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model async=true icons-per-type=iconSet expand-depth=expandDepth}}</code></pre>\\n</div>\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"coffeescript\\\">App.ComponentTreeAsyncController = Em.ObjectController.extend\\n    words: [\'Foo\', \'Bar\', \'Baz\', \'Qux\']\\n    expandDepth: 1\\n\\n    randomWord: ->\\n        @words[Math.floor(Math.random()*@words.length)]\\n\\n    actions:\\n        #This method is invoked by the tree, expecting the children to get back\\n        getChildren: (node, tree) ->\\n            Em.run.later(@, ->\\n                #Let the tree know we finished loading the data\\n                tree.set \'loading\', false\\n                #In reality the data would be loaded from a server via a direct ajax request or using ember-data\\n                o = Math.floor(Math.random()*@words.length)+1\\n                if node.get(\'level\') < 4\\n                    i = 0\\n                    while i < o\\n                        #This is the way to add new children to the expanded node\\n                        node.createChild(title: @randomWord())\\n                        i++\\n                else\\n                    #Call emptyChildren() if there\'s no children at all to render an appropriate icon\\n                    node.emptyChildren()\\n            , 500)\\n</code></pre>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/async.js");

;eval("define(\"dummy/templates/components/em-tree-branch\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree-node\'] || (depth0 && depth0[\'em-tree-node\']),options={hash:{\n        \'model\': (\"\"),\n        \'requestReload\': (\"requestReload\"),\n        \'tree\': (\"view.tree\"),\n        \'async\': (\"controller.async\"),\n        \'targetObject\': (\"controller.targetObject\")\n      },hashTypes:{\'model\': \"ID\",\'requestReload\': \"ID\",\'tree\': \"ID\",\'async\': \"ID\",\'targetObject\': \"ID\"},hashContexts:{\'model\': depth0,\'requestReload\': depth0,\'tree\': depth0,\'async\': depth0,\'targetObject\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree-node\", options))));\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n\n      stack1 = helpers.each.call(depth0, \"children\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=dummy/templates/components/em-tree-branch.js");

;eval("define(\"dummy/templates/components/em-tree-node\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n    <i \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggle\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"iconClass\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></i>\\n\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n    <a \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggle\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"text\\\">*</a>\\n\");\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n    <span class=\\\"em-tree-node-multiselection\\\">\\n    \");\n      stack1 = helpers[\'if\'].call(depth0, \"multi-selected\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </span>\\n\");\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n        <i \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleSelection\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"tree.selected-icon\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></i>\\n    \");\n      return buffer;\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n        <i \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"toggleSelection\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"tree.unselected-icon\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></i>\\n    \");\n      return buffer;\n      }\n\n    function program10(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n    <span class=\\\"actions\\\">\\n    \");\n      stack1 = helpers.each.call(depth0, \"hoveredActions\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </span>\\n\");\n      return buffer;\n      }\n    function program11(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n        \");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree-node-icon-action\'] || (depth0 && depth0[\'em-tree-node-icon-action\']),options={hash:{\n        \'meta\': (\"\"),\n        \'model\': (\"controller.model\")\n      },hashTypes:{\'meta\': \"ID\",\'model\': \"ID\"},hashContexts:{\'meta\': depth0,\'model\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree-node-icon-action\", options))));\n      data.buffer.push(\"</i>\\n    \");\n      return buffer;\n      }\n\n    function program13(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"\\n    \");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree-branch\'] || (depth0 && depth0[\'em-tree-branch\']),options={hash:{\n        \'model\': (\"model\"),\n        \'tree\': (\"tree\"),\n        \'async\': (\"async\"),\n        \'targetObject\': (\"targetObject\")\n      },hashTypes:{\'model\': \"ID\",\'tree\': \"ID\",\'async\': \"ID\",\'targetObject\': \"ID\"},hashContexts:{\'model\': depth0,\'tree\': depth0,\'async\': depth0,\'targetObject\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree-branch\", options))));\n      data.buffer.push(\"\\n\");\n      return buffer;\n      }\n\n      data.buffer.push(\"<span>\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"hasIcon\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</span>\\n\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"tree.in-multi-selection\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<span \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"select\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"nodeSelectedClasses :title\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"model.title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"tree.hovered-actions\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</span>\\n\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"expanded\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/components/em-tree-node.js");

;eval("define(\"dummy/templates/components/em-tree\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree-node\'] || (depth0 && depth0[\'em-tree-node\']),options={hash:{\n        \'model\': (\"model\"),\n        \'tree\': (\"\"),\n        \'async\': (\"async\"),\n        \'targetObject\': (\"targetObject\")\n      },hashTypes:{\'model\': \"ID\",\'tree\': \"ID\",\'async\': \"ID\",\'targetObject\': \"ID\"},hashContexts:{\'model\': depth0,\'tree\': depth0,\'async\': depth0,\'targetObject\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree-node\", options))));\n      \n    });\n  });//# sourceURL=dummy/templates/components/em-tree.js");

;eval("define(\"dummy/templates/emberdata\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"Async Tree\");\n      }\n\n      data.buffer.push(\"<h1>Tree with Ember Data</h1>\\n\\nIt is possible to render a tree from ember data models as long as your model has:\\n<p>\\n<ul>\\n<li><i>children</i> property defined as an <i>hasMany</i> relationship to be rendered as the children of the tree node</li>\\n<li><i>title</i> property defined a string to be the node\'s title</li>\\n</ul>\\n</p>\\n\\n<p>\\nPlease note that for every visibile node its children will be loaded from the server even if the node is not opened,\\nThis is because <i>get(\'children\')</i> is invoked for every node on the tree in order to render its icon appropriately.\\nIf you want a more sophisiticated solution with async support with more control of how children are loaded then look at the \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"async\", options) : helperMissing.call(depth0, \"link-to\", \"async\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" approach.\\n</p>\\n\\n<h2>Demo</h2>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'selected\': (\"current\")\n      },hashTypes:{\'model\': \"ID\",\'selected\': \"ID\"},hashContexts:{\'model\': depth0,\'selected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\nSelected: \");\n      stack1 = helpers._triageMustache.call(depth0, \"current\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<h2>Markup</h2>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model}}</code></pre>\\n</div>\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"coffeescript\\\">#in reality replaced with a real adapter \\nApp.Tag.FIXTURES = [\\n    {id: 1, title: \'Family\', parent: 0, children: [10, 11]}\\n    {id: 10, title: \'Susan\', parent: [1], children: [100, 101]}\\n    {id: 11, title: \'Luda\', parent: [1], children: [102, 103]}\\n    {id: 100, title: \'Josh\', parent: [10], children: []}\\n    {id: 101, title: \'Moses\', parent: [10], children: []}\\n    {id: 102, title: \'Verdi\', parent: [11], children: []}\\n    {id: 103, title: \'Gaya\', parent: [11], children: []}\\n]\\n\\nApp.Tag = DS.Model.extend\\n    title: DS.attr \'string\'\\n    children: DS.hasMany(\'tag\', {async: true})\\n    parent: DS.belongsTo(\'tag\', {async: true})\\n\\nApp.ComponentTreeEmberdataRoute = Em.Route.extend\\n    model: ->\\n        @store.find(\'tag\', 1)\\n</code></pre>\\n</div>\\n\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree-branch\'] || (depth0 && depth0[\'em-tree-branch\']),options={hash:{\n        \'node\': (\"model\")\n      },hashTypes:{\'node\': \"ID\"},hashContexts:{\'node\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree-branch\", options))));\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/emberdata.js");

;eval("define(\"dummy/templates/expand\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h1>Expanded Tree</h1>\\nIt is possible to auto expand the tree by using the <i>expand-depth</i> property on the {{em-tree}} tag, the value of the property should be the max depth level to expand\\n\\n<h2>Demo</h2>\\n<p>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'selected\': (\"current\"),\n        \'expand-depth\': (\"expandDepth\")\n      },hashTypes:{\'model\': \"ID\",\'selected\': \"ID\",\'expand-depth\': \"ID\"},hashContexts:{\'model\': depth0,\'selected\': depth0,\'expand-depth\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"anotherLevel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Expand Level \");\n      stack1 = helpers._triageMustache.call(depth0, \"controller.expandDepth\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</button>\\n</p>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model selected=current expand-depth=expandDepth}}\\n</code></pre>\\n</div>\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"coffeescript\\\">Ember.Controller.extend\\n    expandDepth: 0\\n    actions:\\n        anotherLevel: ->\\n            @set \'expandDepth\', @get(\'expandDepth\')+1\\n</code></pre>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/expand.js");

;eval("define(\"dummy/templates/gettingstarted\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"Simple Example\");\n      }\n\n      data.buffer.push(\"<h1>Getting Started</h1>\\n\\n<i>Ember Idx Tree</i> is an Ember CLI module and can be simply installed by:\\n\\n<ol>\\n    <li>\\n        <pre><code class=\\\"bash\\\">npm install --save-dev ember-idx-tree</code></pre>\\n    </li>\\n</ol>\\n\\n<p>Want to see some code? check out the \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"simple\", options) : helperMissing.call(depth0, \"link-to\", \"simple\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/gettingstarted.js");

;eval("define(\"dummy/templates/hoveredactions\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h1>Hovered Icon Actions</h1>\\n\\n<p>\\n<i>Hovered Icon Actions</i> are small icons rendered on the right side of each node when the node is hovered with the mouse, when an icon is clicked, an action on the controller is triggered.\\n</p>\\n\\n<p>\\n    <ul>\\n        <li>To define actions, pass an array of actions metadata to the <i>{{em-tree}}</i> component as <i>hovered-actions</i> property.</li>\\n        <li>It is possible to define a different actions per node type by the \'types\' array of each <i>actionsMeta</i> entry</li>\\n        <li>Actions can be sticky if the action\'s metadata <i>sticky</i> property is set to <i>true</i>, a sticky action won\'t disappear when the node is not hovered.</li>\\n    </ul>\\n</p>\\n<h2>Demo</h2>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'hovered-actions\': (\"actionsMeta\")\n      },hashTypes:{\'model\': \"ID\",\'hovered-actions\': \"ID\"},hashContexts:{\'model\': depth0,\'hovered-actions\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\n\\nMessage from action: \");\n      stack1 = helpers._triageMustache.call(depth0, \"message\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<h2>Markup</h2>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model hovered-actions=actionsMeta}}</code></pre>\\n</div>\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"coffeescript\\\">Ember.ObjectController.extend\\n    message: undefined\\n    actionsMeta: [\\n        {classes: [\'fa fa-eye\'], action: \'eye\', types: [\'male\']}\\n        {classes: [\'fa fa-edit\'], action: \'edit\', types: [\'female\']}\\n        {classes: [\'fa fa-trash-o\'], action: \'delete\'}\\n    ]\\n    init: ->\\n        #TODO: Import EC instead\\n        family = Em.EC.TreeNode.create({title: \'Family\'}, nodeType: [\'family\'])\\n        #1st level\\n        suz = family.createChild {title: \'Susan\', nodeType: \'male\'}\\n        lud = family.createChild {title: \'Luda\', nodeType: \'female\'}\\n\\n        @set \'model\', family\\n\\n    actions: \\n        edit: (actionView) ->\\n            @set \'message\', \\\"Editing #{actionView.get(\'model.title\')}\\\"\\n        delete: (actionView) ->\\n            @set \'message\', \\\"Deleting #{actionView.get(\'model.title\')}\\\"\\n        eye: (actionView) ->\\n            @set \'message\', \\\"Looking at #{actionView.get(\'model.title\')}\\\"\\n            actionView.toggleProperty \'sticky\'\\n</code></pre>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/hoveredactions.js");

;eval("define(\"dummy/templates/multiselection\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h1>Tree with Multi Selection</h1>\\n\\n<p>\\nThe default selection (when clicking on the Tree\'s title) is one node selection only,\\n\\nTree supports multi selection by setting the <i>multi-selection</i> property on the {{em-tree}} tag to true, this mode will render a checkbox near every node in the tree, letting the user select or de-select every node.\\n</p>\\n\\n<h2>Demo</h2>\\n<p>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'selected\': (\"current\"),\n        \'expand-depth\': (\"expandDepth\"),\n        \'in-multi-selection\': (true),\n        \'multi-selection\': (\"multi\")\n      },hashTypes:{\'model\': \"ID\",\'selected\': \"ID\",\'expand-depth\': \"ID\",\'in-multi-selection\': \"BOOLEAN\",\'multi-selection\': \"ID\"},hashContexts:{\'model\': depth0,\'selected\': depth0,\'expand-depth\': depth0,\'in-multi-selection\': depth0,\'multi-selection\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\n</p>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model selected=current expand-depth=expandDepth}}\\n</code></pre>\\n</div>\\n\\nTotal #\");\n      stack1 = helpers._triageMustache.call(depth0, \"multi.length\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" selected items: \");\n      stack1 = helpers._triageMustache.call(depth0, \"multiNames\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"coffeescript\\\">Ember.Controller.extend\\n    expandDepth: 0\\n    actions:\\n        anotherLevel: ->\\n            @set \'expandDepth\', @get(\'expandDepth\')+1\\n</code></pre>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/multiselection.js");

;eval("define(\"dummy/templates/navbar\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<nav role=\\\"navigation\\\" class=\\\"navbar navbar-default navbar-fixed-top\\\">\\n    <div class=\\\"container\\\">\\n        <div class=\\\"navbar-header\\\">\\n            <button type=\\\"buttonin\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-ex1-collapse\\\" class=\\\"navbar-toggle\\\">\\n                <span class=\\\"sr-only\\\">Toggle navigation</span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n            </button>\\n            <a href=\\\"#\\\" class=\\\"navbar-brand\\\">Ember Idx Tree</a>\\n        </div>\\n        <div class=\\\"collapse navbar-collapse navbar-ex1-collapse\\\">\\n            <ul class=\\\"nav navbar-nav\\\">\\n                <li class=\\\"active\\\">\\n                    <a href=\\\"#\\\">\\n                        <i class=\\\"fa fa-home\\\"></i>\\n                        Home\\n                    </a>\\n                </li>\\n                <li>\\n                    <a href=\\\"https://github.com/indexiatech/ember-idx-tree\\\">\\n                        <i class=\\\"fa fa-github-alt\\\"></i>\\n                        Github\\n                    </a>\\n                </li>\\n            </ul>\\n            <form class=\\\"navbar-form navbar-right\\\">\\n                <a href=\\\"https://github.com/indexiatech/ember-idx-tree/archive/master.zip\\\" style=\\\"font-weight:bold\\\" class=\\\"btn btn-success\\\">\\n                    <i class=\\\"fa fa-save\\\"></i>\\n                    Download 1~ kb\\n                </a>\\n            </form>\\n            <div class=\\\"socials\\\" style=\\\"text-align: center\\\">\\n                <ul class=\\\"bs-social-buttons\\\">\\n                    <li>\\n                        <!-- github -->\\n                        <div>\\n                        <iframe class=\\\"github-btn\\\" src=\\\"http://ghbtns.com/github-btn.html?user=indexiatech&amp;repo=ember-idx-tree&amp;type=watch&amp;count=true\\\" width=\\\"100\\\" height=\\\"20\\\" title=\\\"Star on GitHub\\\"></iframe>\\n                        </div>\\n                    </li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</nav>\");\n      \n    });\n  });//# sourceURL=dummy/templates/navbar.js");

;eval("define(\"dummy/templates/noderefresh\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"addAndRefresh\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">Add child to selected node and refresh</button>\\n\");\n      return buffer;\n      }\n\n      data.buffer.push(\"<h1>Async Tree</h1>\\n\\n<p>\\nIt is possible to request child refresh for a tree node\\n<p>\\n\\n<h2>Demo</h2>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'async\': (true),\n        \'selected\': (\"selected\")\n      },hashTypes:{\'model\': \"ID\",\'async\': \"BOOLEAN\",\'selected\': \"ID\"},hashContexts:{\'model\': depth0,\'async\': depth0,\'selected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\n\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"selected\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\\n<h2>Markup</h2>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model async=true icons-per-type=iconSet}}</code></pre>\\n</div>\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"javascript\\\">Em.ObjectController.extend({\\n  words: [\'Foo\', \'Bar\', \'Baz\', \'Qux\'],\\n  randomWord: function() {\\n    return this.words[Math.floor(Math.random() * this.words.length)];\\n  },\\n  actions: {\\n    addAndRefresh: function() {\\n      return this.get(\'selected\').createChild({\\n        title: this.randomWord()\\n      });\\n    },\\n    getChildren: function(node, c) {\\n      return Em.run.later(this, function() {\\n        var i, o, _results;\\n        c.set(\'loading\', false);\\n        o = Math.floor(Math.random() * this.words.length) + 1;\\n        if (node.get(\'level\') < 4) {\\n          i = 0;\\n          _results = [];\\n          while (i < o) {\\n            node.createChild({\\n              title: this.randomWord()\\n            });\\n            _results.push(i++);\\n          }\\n          return _results;\\n        } else {\\n          return node.emptyChildren();\\n        }\\n      }, 500);\\n    }\\n  }\\n});\\n</code></pre>\\n</div>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/noderefresh.js");

;eval("define(\"dummy/templates/sidebar\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n            <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"route\", options) : helperMissing.call(depth0, \"link-to\", \"route\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n            <ul class=\\\"nav\\\">\\n            \");\n      stack1 = helpers.each.call(depth0, \"items\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n            </ul>\\n        \");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n\n    function program4(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n                <li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"route\", options) : helperMissing.call(depth0, \"link-to\", \"route\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n            \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<div class=\\\"well sidebar\\\">\\n    <ul class=\\\"nav\\\">\\n        \");\n      stack1 = helpers.each.call(depth0, \"model\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    </ul>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/sidebar.js");

;eval("define(\"dummy/templates/simple\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\nSelected node is: \");\n      stack1 = helpers._triageMustache.call(depth0, \"selected.title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"expand\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">toggle expand</button>\\n\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      \n      data.buffer.push(\"\\nSelect a node by clicking on it\\n\");\n      }\n\n      data.buffer.push(\"<h1>Simple Tree</h1>\\n\\n<p>\\nThe simplest form of the tree component is to build a tree of nodes ahead and assign the root node to the <i>{{em-tree}}</i> tag.\\n</p>\\n\\n<p>\\n<ol>\\n    <li>The model must have a <i>children<i/> property that is an array of the children models.</li>\\n    <li>The <i>selected</i> property will be bound to the selected node in the tree.</li>\\n</ol>\\n</p>\\n\\n<h2>Demo</h2>\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-tree\'] || (depth0 && depth0[\'em-tree\']),options={hash:{\n        \'model\': (\"model\"),\n        \'selected\': (\"selected\")\n      },hashTypes:{\'model\': \"ID\",\'selected\': \"ID\"},hashContexts:{\'model\': depth0,\'selected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-tree\", options))));\n      data.buffer.push(\"\\n\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"selected\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n<h2>Markup</h2>\\n\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"handlebars\\\">{{em-tree model=model selected=selected}}\\n&lt;button {{action \'expand\'}}&gt;toggle expand&lt;/button&gt;\\n</code></pre>\\n</div>\\n\\n<h2>Code</h2>\\n<div class=\\\"well line-example\\\">\\n<pre><code class=\\\"coffeescript\\\">import Em from \\\"ember\\\";\\nimport TreeNode from \'ember-idx-tree/node\'\\n\\nexport default Em.ObjectController.extend({\\n  init: function() {\\n    var family, gaya, josh, lud, moses, suz, verdi;\\n    family = TreeNode.create({\\n      title: \'Family\'\\n    });\\n    suz = family.createChild({\\n      title: \'Susan\'\\n    });\\n    lud = family.createChild({\\n      title: \'Luda\'\\n    });\\n    josh = suz.createChild({\\n      title: \'Josh\'\\n    });\\n    moses = suz.createChild({\\n      title: \'Moses\'\\n    });\\n    verdi = lud.createChild({\\n      title: \'Verdi\'\\n    });\\n    gaya = lud.createChild({\\n      title: \'Gaya\'\\n    });\\n    return this.set(\'model\', family);\\n  },\\n  actions: {\\n    expand: function() {\\n      this.get(\'selected\').toggleProperty(\'expanded\');\\n      return null;\\n    }\\n  }\\n});\\n</code></pre>\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/simple.js");

;eval("define(\"dummy/tests/adapters/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/application.js should pass jshint\', function() { \n      ok(false, \'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 28, Missing semicolon.\\nadapters/application.js: line 3, col 42, Missing semicolon.\\n\\n2 errors\'); \n    });\n  });//# sourceURL=dummy/tests/adapters/application.jshint.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/controllers/async.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/async.js should pass jshint\', function() { \n      ok(true, \'controllers/async.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/async.jshint.js");

;eval("define(\"dummy/tests/controllers/expand.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/expand.js should pass jshint\', function() { \n      ok(true, \'controllers/expand.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/expand.jshint.js");

;eval("define(\"dummy/tests/controllers/hoveredactions.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/hoveredactions.js should pass jshint\', function() { \n      ok(true, \'controllers/hoveredactions.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/hoveredactions.jshint.js");

;eval("define(\"dummy/tests/controllers/multiselection.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/multiselection.js should pass jshint\', function() { \n      ok(true, \'controllers/multiselection.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/multiselection.jshint.js");

;eval("define(\"dummy/tests/controllers/noderefresh.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/noderefresh.js should pass jshint\', function() { \n      ok(true, \'controllers/noderefresh.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/noderefresh.jshint.js");

;eval("define(\"dummy/tests/controllers/sidebar.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/sidebar.js should pass jshint\', function() { \n      ok(true, \'controllers/sidebar.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/sidebar.jshint.js");

;eval("define(\"dummy/tests/controllers/simple.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/simple.js should pass jshint\', function() { \n      ok(false, \'controllers/simple.js should pass jshint.\\ncontrollers/simple.js: line 2, col 43, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/simple.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/initializers/highlight.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - initializers\');\n    test(\'initializers/highlight.js should pass jshint\', function() { \n      ok(false, \'initializers/highlight.js should pass jshint.\\ninitializers/highlight.js: line 11, col 20, \\\'hljs\\\' is not defined.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/tests/initializers/highlight.jshint.js");

;eval("define(\"dummy/tests/models/tag.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/tag.js should pass jshint\', function() { \n      ok(true, \'models/tag.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/models/tag.jshint.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/routes/async.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/async.js should pass jshint\', function() { \n      ok(true, \'routes/async.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/async.jshint.js");

;eval("define(\"dummy/tests/routes/emberdata.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/emberdata.js should pass jshint\', function() { \n      ok(true, \'routes/emberdata.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/emberdata.jshint.js");

;eval("define(\"dummy/tests/routes/expand.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/expand.js should pass jshint\', function() { \n      ok(true, \'routes/expand.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/expand.jshint.js");

;eval("define(\"dummy/tests/routes/multiselection.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/multiselection.js should pass jshint\', function() { \n      ok(true, \'routes/multiselection.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/multiselection.jshint.js");

;eval("define(\"dummy/tests/routes/noderefresh.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/noderefresh.js should pass jshint\', function() { \n      ok(true, \'routes/noderefresh.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/noderefresh.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */



});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}



/* jshint ignore:end */

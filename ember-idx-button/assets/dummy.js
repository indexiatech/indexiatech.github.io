eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/button.js should pass jshint\', function() { \n      ok(false, \'ember-cli-qunit/button.js should pass jshint.\\nember-cli-qunit/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/button.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/components/em-button\", \n  [\"ember-idx-button/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonComponent = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonComponent;\n  });//# sourceURL=dummy/components/em-button.js");

;eval("define(\"dummy/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Controller.extend({\n      message: void 0,\n      actions: {\n        onClick: function() {\n          return this.set(\'message\', \'Clicked!\');\n        },\n        makeAsync: function(setPromise) {\n          return setPromise(new Promise(function(res, rej) {\n            return Em.run.later(function() {\n              return res(\"YES\");\n            }, 1500);\n          }));\n        },\n        makeAsyncFailed: function(setPromise) {\n          return setPromise(new Promise(function(res, rej) {\n            return Em.run.later(function() {\n              return rej(\"Server error...\");\n            }, 1500);\n          }));\n        }\n      }\n    });\n  });//# sourceURL=dummy/controllers/application.js");

;eval("define(\"dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-content-security-policy\');\n    test(\'ember-cli-content-security-policy/button.js should pass jshint\', function() { \n      ok(false, \'ember-cli-content-security-policy/button.js should pass jshint.\\nember-cli-content-security-policy/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/ember-cli-content-security-policy/tests/ember-cli-content-security-policy/button.jshint.js");

;eval("define(\"dummy/ember-cli-esnext/tests/ember-cli-esnext/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-esnext\');\n    test(\'ember-cli-esnext/button.js should pass jshint\', function() { \n      ok(false, \'ember-cli-esnext/button.js should pass jshint.\\nember-cli-esnext/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/ember-cli-esnext/tests/ember-cli-esnext/button.jshint.js");

;eval("define(\"dummy/ember-data/tests/ember-data/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-data\');\n    test(\'ember-data/button.js should pass jshint\', function() { \n      ok(false, \'ember-data/button.js should pass jshint.\\nember-data/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/ember-data/tests/ember-data/button.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/button.js should pass jshint\', function() { \n      ok(false, \'ember-export-application-global/button.js should pass jshint.\\nember-export-application-global/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/button.jshint.js");

;eval("define(\"dummy/ember-idx-button/tests/ember-idx-button/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-button\');\n    test(\'ember-idx-button/button.js should pass jshint\', function() { \n      ok(false, \'ember-idx-button/button.js should pass jshint.\\nember-idx-button/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/ember-idx-button/tests/ember-idx-button/button.jshint.js");

;eval("define(\"dummy/ember-idx-utils/tests/ember-idx-utils/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-idx-utils\');\n    test(\'ember-idx-utils/button.js should pass jshint\', function() { \n      ok(false, \'ember-idx-utils/button.js should pass jshint.\\nember-idx-utils/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/ember-idx-utils/tests/ember-idx-utils/button.jshint.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/initializers/hightlight\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Em = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: \'hightlightjs\',\n      initialize: function() {\n        return Em.Route.reopen({\n          renderTemplate: function() {\n            this._super();\n            return Em.run.next(this, function() {\n              return $(\'pre code\').each(function(i, e) {\n                return hljs.highlightBlock(e);\n              });\n            });\n          }\n        });\n      }\n    };\n  });//# sourceURL=dummy/initializers/hightlight.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/button.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/button.js should pass jshint\', function() { \n      ok(false, \'live-reload-middleware/button.js should pass jshint.\\nlive-reload-middleware/button.js: line 2, col 64, Missing semicolon.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/button.jshint.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"container\\\">\\n\\n<h1>Button</h1>\\n\\n<p>\\nA clickable component rendered as an html <i>button</i> tag that has a text and optionally may have an icon,\\nIt is smart enough to avoid bioplate code required to change its state when buttons execute asynchronous calls.\\n</p>\\n\\n<h4> Simplest form - a button with a title</h4>\\n\\n<pre><code class=\\\"handlebars\\\">{{em-button default=\\\"Click Me\\\"}}</code></pre>\\n\\n<p>\\n<div class=\\\"well\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-button\'] || (depth0 && depth0[\'em-button\']),options={hash:{\n        \'default\': (\"Click Me\")\n      },hashTypes:{\'default\': \"STRING\"},hashContexts:{\'default\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-button\", options))));\n      data.buffer.push(\"</div>\\n</p>\\n\\n\\n<h4> With an Icon </h4>\\n<p>\\nA button may also have an icon, if the <i>icon-classes</i> property is set on the <i>{{em-button}}</i> tag then an extra <i>&lt;i&gt;</i> tag will be rendered with the given classes.\\n</p>\\n\\n\\n<pre>\\n    <code class=\\\"handlebars\\\">{{em-button icon-classes=\\\"fa fa-trash-o\\\" default=\\\"With Icon\\\"}}</code>\\n</pre>\\n\\n<p><div class=\\\"well\\\">\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-button\'] || (depth0 && depth0[\'em-button\']),options={hash:{\n        \'icon-classes\': (\"fa fa-trash-o\"),\n        \'default\': (\"With Icon\")\n      },hashTypes:{\'icon-classes\': \"STRING\",\'default\': \"STRING\"},hashContexts:{\'icon-classes\': depth0,\'default\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-button\", options))));\n      data.buffer.push(\"\\n</p></div>\\n\\n<h4> Styles </h4>\\n<p>\\nYou can of course add your own classes to the button to style it differently by setting the <i>class</i> property\\n</p>\\n\\n<pre>\\n    <code class=\\\"handlebars\\\">{{em-button class=\\\"btn btn-danger\\\" default=\\\"Delete\\\"}}</code>\\n</pre>\\n\\n<p><div class=\\\"well\\\">\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-button\'] || (depth0 && depth0[\'em-button\']),options={hash:{\n        \'class\': (\"btn btn-danger\"),\n        \'default\': (\"Delete\")\n      },hashTypes:{\'class\': \"STRING\",\'default\': \"STRING\"},hashContexts:{\'class\': depth0,\'default\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-button\", options))));\n      data.buffer.push(\"\\n</p></div>\\n\\n\\n<h4> Trigger Action </h4>\\n\\n<p>\\nSimply bind an action controller to the button by setting the <i>on-click</i> property.\\n</p>\\n\\n<pre>\\n    <code class=\\\"handlebars\\\">{{em-button on-click=\'onClick\' default=\\\"Click Me!\\\"}} \");\n      stack1 = helpers._triageMustache.call(depth0, \"message\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</code>\\n</pre>\\n\\n<p><div class=\\\"well\\\">\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-button\'] || (depth0 && depth0[\'em-button\']),options={hash:{\n        \'on-click\': (\"onClick\"),\n        \'default\': (\"Click Me!\")\n      },hashTypes:{\'on-click\': \"STRING\",\'default\': \"STRING\"},hashContexts:{\'on-click\': depth0,\'default\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-button\", options))));\n      data.buffer.push(\" \");\n      stack1 = helpers._triageMustache.call(depth0, \"message\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n</p></div>\\n\\n<h4>Async</h4>\\n\\n<p>\\nWhen a button executes an async call (a promise), it may need to:\\n<ol>\\n    <li>Disable button to avoid concurrent calls during the execution of an async call.</li>\\n    <li><i>Optionally</i> change button\'s title and/or its icon when the async call is executing, ended successfully or rejected.</li>\\n</ol>\\n</p>\\n\\n<p>Simply bind the button to a promise and everything will happen</p>\\n\\n<pre>\\n    <code class=\\\"handlebars\\\">{{em-button on-click=\'makeAsync\' default=\'Happy Submit\' icon-default=\'fa fa-trash-o\' icon-executing=\'fa fa-spinner fa-spin\' icon-resolved=\'fa fa-check\' executing=\'Submitting\' resolved=\'Completed\' rejected=\\\"Failed\\\"}}</code>\\n</pre>\\n\\n\\n<p><div class=\\\"well\\\">\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-button\'] || (depth0 && depth0[\'em-button\']),options={hash:{\n        \'on-click\': (\"makeAsync\"),\n        \'default\': (\"Happy Submit\"),\n        \'icon-default\': (\"fa fa-trash-o\"),\n        \'icon-executing\': (\"fa fa-spinner fa-spin\"),\n        \'icon-resolved\': (\"fa fa-check\"),\n        \'executing\': (\"Submitting\"),\n        \'resolved\': (\"Completed\"),\n        \'rejected\': (\"Failed\")\n      },hashTypes:{\'on-click\': \"STRING\",\'default\': \"STRING\",\'icon-default\': \"STRING\",\'icon-executing\': \"STRING\",\'icon-resolved\': \"STRING\",\'executing\': \"STRING\",\'resolved\': \"STRING\",\'rejected\': \"STRING\"},hashContexts:{\'on-click\': depth0,\'default\': depth0,\'icon-default\': depth0,\'icon-executing\': depth0,\'icon-resolved\': depth0,\'executing\': depth0,\'resolved\': depth0,\'rejected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-button\", options))));\n      data.buffer.push(\"\\n</p></div>\\n\\n<pre>\\n    <code class=\\\"handlebars\\\">{{em-button on-click=\'makeAsyncFailed\' default=\'Sad Submit\' executing=\'Submitting\' resolved=\'Completed\' rejected=\\\"Failed :/\\\"}}</code>\\n</pre>\\n\\n\\n<p><div class=\\\"well\\\">\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-button\'] || (depth0 && depth0[\'em-button\']),options={hash:{\n        \'on-click\': (\"makeAsyncFailed\"),\n        \'default\': (\"Sad Submit\"),\n        \'executing\': (\"Submitting\"),\n        \'resolved\': (\"Completed\"),\n        \'rejected\': (\"Failed :/\")\n      },hashTypes:{\'on-click\': \"STRING\",\'default\': \"STRING\",\'executing\': \"STRING\",\'resolved\': \"STRING\",\'rejected\': \"STRING\"},hashContexts:{\'on-click\': depth0,\'default\': depth0,\'executing\': depth0,\'resolved\': depth0,\'rejected\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-button\", options))));\n      data.buffer.push(\"\\n</p>\\n</div>\\n\\n<pre>\\n<code class=\\\"javascript\\\">import Em from \\\"ember\\\";\\n\\nexport default Em.Controller.extend({\\n  message: void 0,\\n  actions: {\\n    onClick: function() {\\n      return this.set(\'message\', \'Clicked!\');\\n    },\\n    makeAsync: function(setPromise) {\\n      return setPromise(new Promise(function(res, rej) {\\n        return Em.run.later(function() {\\n          return res(\\\"YES\\\");\\n        }, 1500);\\n      }));\\n    },\\n    makeAsyncFailed: function(setPromise) {\\n      return setPromise(new Promise(function(res, rej) {\\n        return Em.run.later(function() {\\n          return rej(\\\"Server error...\\\");\\n        }, 1500);\\n      }));\\n    }\\n  }\\n});\\n    </code>\\n</pre>\\n\\n\\n</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/components/em-button\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n    <i \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"icon-classes\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></i>\\n\");\n      return buffer;\n      }\n\n      stack1 = helpers[\'if\'].call(depth0, \"icon-classes\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"label\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/components/em-button.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(false, \'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 10, col 29, \\\'Promise\\\' is not defined.\\ncontrollers/application.js: line 17, col 29, \\\'Promise\\\' is not defined.\\n\\n2 errors\'); \n    });\n  });//# sourceURL=dummy/tests/controllers/application.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/initializers/hightlight.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - initializers\');\n    test(\'initializers/hightlight.js should pass jshint\', function() { \n      ok(false, \'initializers/hightlight.js should pass jshint.\\ninitializers/hightlight.js: line 11, col 20, \\\'hljs\\\' is not defined.\\n\\n1 error\'); \n    });\n  });//# sourceURL=dummy/tests/initializers/hightlight.jshint.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */



});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}



/* jshint ignore:end */
